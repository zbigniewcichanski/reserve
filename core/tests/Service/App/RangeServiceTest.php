<?php
/**
 * Created by PhpStorm.
 * @author: Zbyszek Cichanski
 * Date: 27.12.2016
 * Time: 22:29
 */

namespace Tests\Owner\App;


use Core\Service\App\Command\RangeCommand;
use Core\Service\App\RangeService;

class RangeServiceTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var RangeService $service
     */
    private $service;

    public function setUp()
    {
        $c = require_once "../../../config/container.php";
        $this->service =$c->get('service-app-range-service');

        parent::setUp(); // TODO: Change the autogenerated stub
    }


    public function testCreateRange()
    {
        $rangeCommand = new RangeCommand();
        $rangeCommand->name = 'podstawÃ³wka';

        $result = $this->service->createRange($rangeCommand);
        var_dump($result);
        $this->assertNotNull($result);
        $this->assertInstanceOf('\Core\Core\MessageInterface', $result);
        $this->assertTrue($result->getStatus());
        $this->assertNotEmpty($result);
    }

    public function testChangeRangename()
    {
        $rangeCommand = new RangeCommand();
        $rangeCommand->name = 'podst';
        $rangeCommand->id = 'bf8f9e09b4d8c743a7dd53198680e9fe';

        $result = $this->service->changeRangeName($rangeCommand);
        var_dump($result);
        $this->assertNotNull($result);
        $this->assertInstanceOf('\Core\Core\MessageInterface', $result);
        $this->assertTrue($result->getStatus());
        $this->assertNotEmpty($result);
    }

    public function testRemoveRange()
    {
        $rangeCommand = new RangeCommand();
        $rangeCommand->id = 'bf8f9e09b4d8c743a7dd53198680e9fe';

        $result = $this->service->removeRange($rangeCommand);
        var_dump($result);
        $this->assertNotNull($result);
        $this->assertInstanceOf('\Core\Core\MessageInterface', $result);
        $this->assertTrue($result->getStatus());
        $this->assertNotEmpty($result);
    }

    public function testGetRangeList()
    {

        $result = $this->service->getRangeList();
        var_dump($result);
        $this->assertNotNull($result);
        $this->assertTrue($result->getStatus());
        $this->assertNotEmpty($result);
    }

}
